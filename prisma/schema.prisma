// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma

datasource db {
  provider = "postgresql" // Utilise la base de données PostgreSQL, mais tu peux le changer selon tes besoins.
  url      = env("DATABASE_URL")
}

// Enum pour les rôles d'utilisateur
enum Role {
  ADMIN
  USER
}

// Modèle User
model Iuser {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String?
  email     String    @unique
  password  String // Ajout du champ password
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[] // Relation avec les commandes de l'utilisateur
  invoices  Invoice[] // Relation avec les factures de l'utilisateur
}

// Modèle Category
model Category {
  id        Int       @id @default(autoincrement())
  label     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] // Relation avec les produits
}

// Modèle Product
model Product {
  id          Int            @id @default(autoincrement())
  label       String
  unit_price  Int            @default(0)
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id])
  images      Image[]
  orders      OrderProduct[]
  variantes   Variante[]
}

// Modèle Image
model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

// Modèle Order
model Order {
  id        Int            @id @default(autoincrement())
  status    String
  amount    Float
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    Int
  user      Iuser          @relation(fields: [userId], references: [id])
  products  OrderProduct[]
  Invoice   Invoice[]
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

// Modèle Invoice
model Invoice {
  id        Int      @id @default(autoincrement())
  status    String // "paid", "unpaid", "pending", etc.
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      Iuser    @relation(fields: [userId], references: [id])
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
}

// Modèle caracteristique
model Variante {
  id               Int     @id @default(autoincrement())
  unit_price       String
  label            String?
  reference        String?
  description      String?
  q800             String?
  q100             String?
  diametreQa       String?
  diametreQb       String?
  qrReservation    String?
  qc               String?
  ht               String?
  hu               String?
  i                String?
  E                String?
  poids            String?
  lXh              String? // Largeur x Hauteur
  longueur         String?
  a                String?
  epaisseurE1      String?
  epaisseurE2      String?
  approxPoids      String?
  designationAxBxC String?
  b                String?
  c                String?
  e                String?
  l                String?

  productId Int
  product   Product @relation(fields: [productId], references: [id]) // Relation avec le produit
}
